(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{381:function(n,e,s){"use strict";s.r(e);var t=s(45),a=Object(t.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"生产环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生产环境"}},[n._v("#")]),n._v(" 生产环境")]),n._v(" "),s("h2",{attrs:{id:"单独提取css文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单独提取css文件"}},[n._v("#")]),n._v(" 单独提取css文件")]),n._v(" "),s("ol",[s("li",[s("p",[n._v("下载插件")]),n._v(" "),s("blockquote",[s("p",[n._v("npm install --save-dev mini-css-extract-plugin")])])]),n._v(" "),s("li",[s("p",[n._v("修改webpack.config.js的配置")])])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const { resolve } = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/js/index.js',\n  output: {\n    filename: 'js/built.js',\n    path: resolve(__dirname, 'build')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          // 创建 style 标签，将样式放入\n          // 'style-loader',\n          // 这个 loader 取代 style-loader。作用：提取 js 中的 css 成单独文件\n          MiniCssExtractPlugin.loader,\n          // 将 css 文件整合到 js 文件中\n          'css-loader'\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    }),\n    new MiniCssExtractPlugin({\n      // 对输出的 css 文件进行重命名\n      filename: 'css/built.css'\n    })\n  ],\n  mode: 'production'\n};\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[n._v("运行指令: webpack")])]),n._v(" "),s("h2",{attrs:{id:"css兼容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css兼容"}},[n._v("#")]),n._v(" css兼容")]),n._v(" "),s("ol",[s("li",[s("p",[n._v("下载loader")]),n._v(" "),s("blockquote",[s("p",[n._v("npm install --save-dev postcss-loader postcss-preset-env")])])]),n._v(" "),s("li",[s("p",[n._v("修改webpack.config.js配置")])])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const { resolve } = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\n// process.env.NODE_ENV = 'envelopment';  //node环境\n\nmodule.exports = {\n  entry: './src/js/index.js',\n  output: {\n    filename: 'js/built.js',\n    path: resolve(__dirname, 'build')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader',\n          {\n            loader: 'postcss-loader',\n            //loader配置\n            options: {\n              ident: 'postcss',\n              plugins: () => [\n                // postcss 的插件, node版本不同可能需要修改配置\n                require('postcss-preset-env')()\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    }),\n    new MiniCssExtractPlugin({\n      filename: 'css/built.css'\n    })\n  ],\n  mode: 'production'\n};\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[n._v("修改package.json")])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('// json文件不能有注释, 直接复制请删除注释\n//兼容哪些浏览器, 可以根据node环境去选择相应的配置\n//想知道更多详细配置, 去github搜索browserslist\n"browserslist": {\n    //开发环境\n    "development": [\n      "last 1 chrome version",\n      "last 1 firefox version",\n      "last 1 safari version"\n    ],\n    //生产环境\n    "production": [\n      ">0.2%",\n      "not dead",\n      "not op_mini all"\n    ]\n  }\n')])])]),s("ol",{attrs:{start:"4"}},[s("li",[n._v("运行webpack")])]),n._v(" "),s("h2",{attrs:{id:"css压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css压缩"}},[n._v("#")]),n._v(" css压缩")]),n._v(" "),s("ol",[s("li",[s("p",[n._v("下载插件")]),n._v(" "),s("blockquote",[s("p",[n._v("npm install --save-dev optimize-css-assets-webpack-plugin")])])]),n._v(" "),s("li",[s("p",[n._v("修改webpack.config.js文件")])])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const { resolve } = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/js/index.js',\n  output: {\n    filename: 'js/built.js',\n    path: resolve(__dirname, 'build')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader',\n          {\n            loader: 'postcss-loader',\n            options: {\n              ident: 'postcss',\n              plugins: () => [require('postcss-preset-env')()]\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    }),\n\n    new MiniCssExtractPlugin({\n      filename: 'css/built.css'\n    }),\n\n    // 压缩 css\n    new OptimizeCssAssetsWebpackPlugin()\n  ],\n  mode: 'production'\n};\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[n._v("运行webpack")])]),n._v(" "),s("h2",{attrs:{id:"js语法检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js语法检查"}},[n._v("#")]),n._v(" js语法检查")]),n._v(" "),s("ol",[s("li",[s("p",[n._v("下载包")]),n._v(" "),s("blockquote",[s("p",[n._v("npm install --save-dev eslint-loader eslint eslint-config-airbnb-base eslint-plugin-import")])])]),n._v(" "),s("li",[s("p",[n._v("修改webpack.config.js配置文件")])])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const { resolve } = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/js/index.js',\n  output: {\n    filename: 'js/built.js',\n    path: resolve(__dirname, 'build')\n  },\n  module: {\n    /*语法检查： eslint-loader eslint\n      注意：只检查自己写的源代码，第三方的库是不用检查的\n      设置检查规则：\n        package.json 中 eslintConfig 中设置~\n          \"eslintConfig\": {\n             \"extends\": \"airbnb-base\"\n          }\n\n      airbnb --\x3e eslint-config-airbnb-base eslint-plugin-import eslint\n     */\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'eslint-loader',\n        options: {\n          // 自动修复 eslint 的错误\n          fix: true\n        }\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  mode: 'production'\n};\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[n._v("修改package.json文件")])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('//在package中增加该配置\n"eslintConfig": {\n    "extends": "airbnb-base",\n    "env": {\n      "browser": true\n    }\n  }\n')])])]),s("ol",{attrs:{start:"4"}},[s("li",[n._v("运行webpack")])]),n._v(" "),s("h2",{attrs:{id:"js兼容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js兼容"}},[n._v("#")]),n._v(" js兼容")]),n._v(" "),s("ol",[s("li",[s("p",[n._v("下载loader(@babel/polyfill已废弃)")]),n._v(" "),s("blockquote",[s("p",[n._v("npm install --save-dev babel-loader @babel/core @babel/preset-env  core-js")])])]),n._v(" "),s("li",[s("p",[n._v("修改webpack.config.js配置")])])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const { resolve } = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/js/index.js',\n  output: {\n    filename: 'js/built.js',\n    path: resolve(__dirname, 'build')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loader',\n        options: {\n          // 预设：指示 babel 做怎么样的兼容性处理\n          presets: [\n            [\n              '@babel/preset-env',\n              {\n                // 按需加载\n                useBuiltIns: 'usage',\n                // 指定 core-js 版本\n                corejs: {\n                  version: 3\n                },\n                // 指定兼容性做到哪个版本浏览器\n                targets: {\n                  chrome: '60',\n                  firefox: '60',\n                  ie: '9',\n                  safari: '10',\n                  edge: '17'\n                }\n              }\n            ]\n          ]\n        }\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  mode: 'development'\n};\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[n._v("运行webpack")])]),n._v(" "),s("h2",{attrs:{id:"js和html压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js和html压缩"}},[n._v("#")]),n._v(" js和html压缩")]),n._v(" "),s("ol",[s("li",[s("p",[n._v("下载插件")]),n._v(" "),s("blockquote",[s("p",[n._v("npm install --save-dev html-webpack-plugin")])])]),n._v(" "),s("li",[s("p",[n._v("修改webpack.config.js文件")])])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const { resolve } = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/js/index.js',\n  output: {\n    filename: 'js/built.js',\n    path: resolve(__dirname, 'build')\n  },\n  module: {\n    rules: []\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n      // 压缩 html 代码\n      minify: {\n        // 移除空格\n        collapseWhitespace: true,\n        // 移除注释\n        removeComments: true\n      }\n    })\n  ],\n  //改为生产模式会自动压缩js\n  mode: 'production'\n};\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[n._v("运行webpack")])]),n._v(" "),s("h2",{attrs:{id:"生产总配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生产总配置"}},[n._v("#")]),n._v(" 生产总配置")]),n._v(" "),s("ol",[s("li",[n._v("修改webpack.config.js的配置")])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const { resolve } = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\n// 定义 nodejs 环境变量：决定使用 browserslist 的哪个环境\nprocess.env.NODE_ENV = 'production';\n\n// 复用 loader\nlet commonCssLoader = [\n  MiniCssExtractPlugin.loader,\n  'css-loader',\n  {\n    // 还需要在 package.json 中定义 browserslist\n    loader: 'postcss-loader',\n    options: {\n      ident: 'postcss',\n      plugins: () => [require('postcss-preset-env')()]\n    }\n  }\n];\n\nmodule.exports = {\n  entry: './src/js/index.js',\n  output: {\n    filename: 'js/built.js',\n    path: resolve(__dirname, 'build')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [...commonCssLoader]\n      },\n      {\n        test: /\\.less$/,\n        use: [...commonCssLoader, 'less-loader']\n      },\n      /*正常来讲，一个文件只能被一个 loader 处理。\n        当一个文件要被多个 loader 处理，那么一定要指定 loader 执行的先后顺序：\n        先执行 eslint 在执行 babel\n      */\n      {\n        // 在 package.json 中 eslintConfig --\x3e airbnb\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        // 优先执行\n        enforce: 'pre',\n        loader: 'eslint-loader',\n        options: {\n          fix: true\n        }\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loader',\n        options: {\n          presets: [\n            [\n              '@babel/preset-env',\n              {\n                useBuiltIns: 'usage',\n                corejs: {\n                  version: 3\n                },\n                targets: {\n                  chrome: '60',\n                  firefox: '60',\n                  ie: '9',\n                  safari: '10',\n                  edge: '17'\n                }\n              }\n            ]\n          ]\n        }\n      },\n      {\n        test: /\\.(png|jpg|gif)$/,\n        loader: 'url-loader',\n        options: {\n          limit: 73 * 1024,\n          name: '[hash:10].[ext]',\n          outputPath: 'imgs'\n        }\n      },\n      {\n        exclude: /\\.(html|css|less|js|png|jpg|gif)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[hash:10].[ext]',\n          outputPath: 'media'\n        }\n      }\n    ]\n  },\n  plugins: [\n    new OptimizeCssAssetsWebpackPlugin(),\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n      minify: {\n        collapseWhitespace: true,\n        removeComments: true\n      }\n    }),\n    new MiniCssExtractPlugin({\n      filename: 'css/built.css'\n    })\n  ],\n  mode: 'production'\n};\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[n._v("在package.json中添加browserslist属性")])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('"browserslist": {\n    "development": [\n      "last 1 chrome version",\n      "last 1 firefox version",\n      "last 1 safari version"\n    ],\n    "production": [\n      ">0.2%",\n      "not dead",\n      "not op_mini all"\n    ]\n}\n')])])]),s("ol",{attrs:{start:"3"}},[s("li",[n._v("在package.json中添加eslintConfig属性")])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('"eslintConfig": {\n    "extends": "airbnb-base",\n    "env": {\n      "browser": true\n    }\n}\n')])])]),s("ol",{attrs:{start:"4"}},[s("li",[n._v("运行webpack")])])])}),[],!1,null,null,null);e.default=a.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{403:function(l,e,a){"use strict";a.r(e);var n=a(45),s=Object(n.a)({},(function(){var l=this,e=l.$createElement,a=l._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[a("h2",{attrs:{id:"js模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js模块化"}},[l._v("#")]),l._v(" JS模块化")]),l._v(" "),a("ul",[a("li",[l._v("模块化的理解")]),l._v(" "),a("li",[l._v("什么是模块?\n"),a("ul",[a("li",[l._v("将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起")]),l._v(" "),a("li",[l._v("块的内部数据/实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信")])])]),l._v(" "),a("li",[l._v("一个模块的组成\n"),a("ul",[a("li",[l._v("数据---\x3e内部的属性")]),l._v(" "),a("li",[l._v("操作数据的行为---\x3e内部的函数")])])]),l._v(" "),a("li",[l._v("模块化\n"),a("ul",[a("li",[l._v("编码时是按照模块一个一个编码的, 整个项目就是一个模块化的项目")])])]),l._v(" "),a("li",[l._v("模块化的进化过程\n"),a("ul",[a("li",[l._v("全局function模式 :\n"),a("ul",[a("li",[l._v("编码: 全局变量/函数")]),l._v(" "),a("li",[l._v("问题: 污染全局命名空间, 容易引起命名冲突/数据不安全")])])]),l._v(" "),a("li",[l._v("namespace模式 :\n"),a("ul",[a("li",[l._v("编码: 将数据/行为封装到对象中")]),l._v(" "),a("li",[l._v("解决: 命名冲突(减少了全局变量)")]),l._v(" "),a("li",[l._v("问题: 数据不安全(外部可以直接修改模块内部的数据)")])])]),l._v(" "),a("li",[l._v("IIFE模式/增强\n"),a("ul",[a("li",[l._v("IIFE : 立即调用函数表达式---\x3e匿名函数自调用")]),l._v(" "),a("li",[l._v("编码: 将数据和行为封装到一个函数内部, 通过给window添加属性来向外暴露接口")]),l._v(" "),a("li",[l._v("引入依赖: 通过函数形参来引入依赖模块"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[l._v("(function(window, module2){\n  var data = 'atguigu.com'\n  function foo() {\n     module2.xxx()\n     console.log('foo()'+data)\n  }\n  function bar() {\n     console.log('bar()'+data)\n  }\n  \n  window.module = {foo}\n})(window, module2)\n")])])])])])])])]),l._v(" "),a("li",[l._v("模块化规范\n"),a("ul",[a("li",[l._v("CommonJS\n"),a("ul",[a("li",[l._v("Node.js : 服务器端")]),l._v(" "),a("li",[l._v("Browserify : 浏览器端    也称为js的打包工具")]),l._v(" "),a("li",[l._v("基本语法:\n"),a("ul",[a("li",[l._v("定义暴露模块 : exports"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[l._v("exports.xxx = value\nmodule.exports = value\n")])])])])]),l._v("\n引入模块 : require"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[l._v("var module = require('模块名/模块相对路径')\n")])])])]),l._v(" "),a("li",[l._v("引入模块发生在什么时候?\n"),a("ul",[a("li",[l._v("Node : 运行时, 动态同步引入")]),l._v(" "),a("li",[l._v("Browserify : 在运行前对模块进行编译/转译/打包的处理(已经将依赖的模块包含进来了),\n运行的是打包生成的js, 运行时不存在需要再从远程引入依赖模块")])])])])]),l._v(" "),a("li",[l._v("AMD : 浏览器端\n"),a("ul",[a("li",[l._v("require.js")]),l._v(" "),a("li",[l._v("基本语法\n"),a("ul",[a("li",[l._v("定义暴露模块: define([依赖模块名], function(){return 模块对象})")]),l._v(" "),a("li",[l._v("引入模块: require(['模块1', '模块2', '模块3'], function(m1, m2){//使用模块对象})")]),l._v(" "),a("li",[l._v("配置:"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[l._v("require.config({\n  //基本路径\n  baseUrl : 'js/',\n  //标识名称与路径的映射\n  paths : {\n    '模块1' : 'modules/模块1',\n    '模块2' : 'modules/模块2',\n    'angular' : 'libs/angular',\n    'angular-messages' : 'libs/angular-messages'\n  },\n  //非AMD的模块\n  shim : {\n    'angular' : {\n        exports : 'angular'\n    },\n    'angular-messages' : {\n        exports : 'angular-messages',\n        deps : ['angular']\n    }\n  }\n})\n")])])])])])])])]),l._v(" "),a("li",[l._v("CMD : 浏览器端\n"),a("ul",[a("li",[l._v("sea.js")]),l._v(" "),a("li",[l._v("基本语法\n"),a("ul",[a("li",[l._v("定义暴露模块:"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[l._v("define(function(require, module, exports){\n  通过require引入依赖模块\n  通过module/exports来暴露模块\n  exports.xxx = value\n})\n")])])])]),l._v(" "),a("li",[l._v("使用模块seajs.use(['模块1', '模块2'])")])])])])]),l._v(" "),a("li",[l._v("ES6\n"),a("ul",[a("li",[l._v("ES6内置了模块化的实现")]),l._v(" "),a("li",[l._v("基本语法\n"),a("ul",[a("li",[a("p",[l._v("定义暴露模块 : export")]),l._v(" "),a("ul",[a("li",[l._v("暴露一个对象:"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[l._v("export default 对象\n")])])])]),l._v(" "),a("li",[l._v("暴露多个:"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[l._v("export var xxx = value1\nexport let yyy = value2\n\nvar xxx = value1\nlet yyy = value2\nexport {xxx, yyy}\n")])])])])])]),l._v(" "),a("li",[a("p",[l._v("引入使用模块 : import")]),l._v(" "),a("ul",[a("li",[l._v("default模块:"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[l._v("import xxx  from '模块路径/模块名'\n")])])])]),l._v(" "),a("li",[l._v("其它模块"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[l._v("import {xxx, yyy} from '模块路径/模块名'\nimport * as module1 from '模块路径/模块名'\n")])])])])])])])]),l._v(" "),a("li",[l._v("问题: 所有浏览器还不能直接识别ES6模块化的语法")]),l._v(" "),a("li",[l._v("解决:\n"),a("ul",[a("li",[l._v("使用Babel将ES6---\x3eES5(使用了CommonJS) ----浏览器还不能直接支行")]),l._v(" "),a("li",[l._v("使用Browserify---\x3e打包处理----浏览器可以运行")])])])])])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);